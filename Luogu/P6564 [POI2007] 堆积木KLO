#include <iostream>
#include <algorithm>

const int maxN = 1e5;

int n;
int a[maxN + 10];
int f[maxN + 10];
int ans;

struct Node {
    int a;
    int i;
    
    bool operator<(const Node &other) const {
        if (i - a != other.i - other.a) return i - a < other.i - other.a;
        return i < other.i;
    }
} node[maxN + 10];

struct SegmentTree {
    struct Node {
        int val;
        int tag;
    } node[4 * maxN + 10];

    void MakeTag(int u, int val) {
        node[u].val = std::max(node[u].val, val);
        node[u].tag = std::max(node[u].tag, val);
        return;
    }

    void PushDown(int u) {
        if (!node[u].tag) return;
        MakeTag(2 * u, node[u].tag);
        MakeTag(2 * u + 1, node[u].tag);
        node[u].tag = 0;
        return;
    }

    void PushUp(int u) {
        node[u].val = std::max(node[2 * u].val, node[2 * u + 1].val);
        return;
    }

    void Modify(int u, int l, int r, int s, int t, int val) {
        if (s <= l && r <= t) {
            MakeTag(u, val);
            return;
        }
        PushDown(u);
        int mid = (l + r) / 2;
        if (s <= mid) Modify(2 * u, l, mid, s, t, val);
        if (t >= mid + 1) Modify(2 * u + 1, mid + 1, r, s, t, val);
        PushUp(u);
    }

    int Query(int u, int l, int r, int s, int t) {
        if (s > t) return 0;
        if (s <= l && r <= t) return node[u].val;
        PushDown(u);
        int mid = (l + r) / 2;
        if (t <= mid) return Query(2 * u, l, mid, s, t);
        if (s >= mid + 1) return Query(2 * u + 1, mid + 1, r, s, t);
        return std::max(Query(2 * u, l, mid, s, t), Query(2 * u + 1, mid + 1, r, s, t));
    }
} SGT;

int main() {
    std::cin >> n;
    for (int i = 1; i <= n; i++) std::cin >> a[i];
    for (int i = 1; i <= n; i++) node[i].a = a[i];
    for (int i = 1; i <= n; i++) node[i].i = i;
    std::sort(node + 1, node + n + 1);
    for (int i = 1; i <= n; i++) {
        if (node[i].i < node[i].a) continue;
        f[node[i].i] = SGT.Query(1, 1, n, 1, node[i].a - 1) + 1;
        SGT.Modify(1, 1, n, node[i].a, n, f[node[i].i]);
    }
    for (int i = 1; i <= n; i++) ans = std::max(ans, f[i]);
    std::cout << ans << '\n';
    return 0;
}