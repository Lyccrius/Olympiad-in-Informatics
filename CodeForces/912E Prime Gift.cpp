#include <iostream>
#include <algorithm>
#include <vector>
#include <map>

void promote() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
    return;
}

typedef unsigned long long lxl;
typedef std::vector<lxl> vlc;

const int maxN = 16;
const lxl inf = 1e18;

int n;
int p[maxN + 10];
int k;
vlc pre;
vlc suf;

void DFS(int cur, lxl now, vlc &res) {
    //printf("DFS(%d, %d, %lld)\n", l, r, now);
    res.push_back(now);
    if (cur > n) return;
    //if (l > r) return;
    lxl x = 1;
    while (x <= inf / now) {
        DFS(cur + 2, x * now, res);
        x *= p[cur];
    }
    /*
    while (now * p[l] <= inf) {
        now *= p[l];
        DFS(l + 1, r, now, res);
    }
    */
    return;
}

bool check(lxl x) {
    lxl cnt = 0;
    //printf("check(%lld)\n", x);
    //cnt += std::lower_bound(pre.begin(), pre.end(), x) - pre.begin();
    //int last = suf.end() - suf.begin();
    int other = suf.size() - 1;
    for (auto i : pre) {
        if (x / i == 0) break;
        //while (other >= 0 && suf[other] > x / i) other--;
        //cnt += other + 1;
        //last = std::upper_bound(suf.begin(), suf.begin() + last, x / i) - suf.begin();
        //cnt += last;
        //if (last == 0) break;
        cnt += std::upper_bound(suf.begin(), suf.end(), x / i) - suf.begin();
        //printf("search %lld = %lld\n", x / i, std::upper_bound(suf.begin(), suf.end(), x / i) - suf.begin());
    }
    //printf("check(%lld) = %lld\n", x, cnt);
    return cnt >= k;
}

int main() {
    promote();
    std::cin >> n;
    for (int i = 1; i <= n; i++) std::cin >> p[i];
    std::cin >> k;
    int m = n / 2;
    std::sort(p + 1, p + n + 1);
    //pre.push_back(1);
    //suf.push_back(1);
    DFS(1, 1, pre);
    DFS(2, 1, suf);
    std::sort(pre.begin(), pre.end());
    std::sort(suf.begin(), suf.end());
    pre.erase(std::unique(pre.begin(), pre.end()), pre.end());
    suf.erase(std::unique(suf.begin(), suf.end()), suf.end());
    //for (auto i : pre) std::cout << i << ' '; std::cout << '\n';
    //for (auto i : suf) std::cout << i << ' '; std::cout << '\n';
    lxl l = 0;
    lxl r = inf;
    while (l < r) {
        lxl mid = (l + r) / 2;
        if (check(mid)) r = mid;
        else l = mid + 1;
    }
    std::cout << l;
    return 0;
}

/*
2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899906842624 2251799813685248 4503599627370496 9007199254740992 18014398509481984 36028797018963968 72057594037927936 144115188075855872 288230376151711744 576460752303423488 

*/